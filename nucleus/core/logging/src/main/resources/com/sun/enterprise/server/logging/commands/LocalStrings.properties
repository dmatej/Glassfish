#
# Copyright (c) 2010, 2018 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0, which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception, which is available at
# https://www.gnu.org/software/classpath/license.html.
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
#

set.log.level.usagetext=set-log-level\n\t[--help]\n\t[--target=target]\n\tlogger-name=logger-level[:logger-name=logger-level]*
set.log.level.invalid=Invalid logger level found {0}.  Valid levels are: SEVERE, WARNING, INFO, FINE, FINER, FINEST
set.log.level.failed=Could not set logger levels for {0}.
set.log.level.properties={0} package set with log level {1}.
set.log.level.success=These logging levels are set for {0}.
collectlogfiles.outputPath.notexist=Retrieve File Path does not exist. Please enter correct value for Retrieve File Path.
collectlogfiles.creatingZip=Error while creating zip file {0}.
collectlogfiles.creatingTempDirectory=Error while creating temp directory on server for downloading log files.
collectlogfiles.errInstanceDownloading=Error while downloading log files from {0}.
collectlogfiles.copyingZip=Error while copying zip file to {0}.
collectlogfiles.successInstanceDownloading=Log files are downloaded for {0}.
collectlogfiles.instance.success=Created Zip file under {0}.
collectlogfiles.cluster.success={0} Created Zip file under {1}.
collectlogfiles.noinstance=No instances are defined as part of {0}. So there are no files to zip.
collectlogfiles.errGettingLogFiles=Error while getting log file attribute for {0}.
invalid.target.sys.props=Invalid target: {0}. Valid default target is a server named ''server'' (default) or cluster name.
invalid.target.sys.props1=Instance {0} is part of the Cluster so valid target value is {1}.
set.log.attribute.properties={0} logging attribute value set to {1}.
set.log.attribute.invalid=Invalid logging attribute name or value {0}={1}.
set.log.attribute.success=The logging attributes are saved successfully for {0}.
set.log.attribute.failed=Could not set logging attributes for {0}.
get.log.attribute.failed=Could not get logging attributes for {0}.
get.log.level.failed=Could not get logging levels for {0}.
delete.log.level.success=These logging levels are deleted for {0}.
delete.log.level.failed=Could not delete logger levels for {0}.
list.loggers=Lists the public loggers along with their source subsystem names and descriptions.
list.loggers.failed=Error listing loggers: {0}
list.loggers.header.name=Logger Name
list.loggers.header.subsystem=Subsystem
list.loggers.header.description=Logger Description
parent.dir.create.failed=Failed to create the parent dir {0}
rotated.log.message=Rotated log on instance named ''{0}''.
set.log.file.format=Sets the Formatter to be used for the server log file.
set.log.file.format.target=The DAS, stand alone instance or cluster name to which this configuration change applies.
set.log.file.format.formatter=Specifies the formatter for the log file, the value could be either ODL, ULF or the fully qualified name of the java.util.logging.Formatter class.
set.log.file.format.success=The log file formatter is set to {0} for instance {1}.
