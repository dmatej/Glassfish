#
# Copyright (c) 1997, 2018 Oracle and/or its affiliates. All rights reserved.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License v. 2.0, which is available at
# http://www.eclipse.org/legal/epl-2.0.
#
# This Source Code may also be made available under the following Secondary
# Licenses when the conditions for such availability set forth in the
# Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
# version 2 with the GNU Classpath Exception, which is available at
# https://www.gnu.org/software/classpath/license.html.
#
# SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
#

# resource bundle for runtime messages
# key consists of: <subpackage>.<class>.<method>.<description>
# <subpackage> - is optional, package under runtime
# <class> - class name
# <method> - method name
# <description> - short description (use _ to represent space)
# all keys should be in lowercase
#
# The message ID for a message in persistence is derived as follows:
# JDO<2_digit_bundle_prefix><1_digit_section_number><2_digit_serial_number>
#
# The 2 digit prefix for this bundle is 81.
#
# When adding a new message:
# 1. Please make sure that you add the message to the end of the file.
# 2. Please add message ID to any user visible message.
# 3. The message ID for the new message = message ID for the last numbered
#    message in the file + 1.
# 4. Please do not change message number for existing messages. These numbers
#    are potentially mapped to more explanation about the message for the end
#    user.
#

###############################################################################
# <This bundle is not divided into sections.>
# Message ID Range: JDO81000 - JDO81999
###############################################################################
utility.nullsemaphore.constructor=NullSemaphore constructor() for {0}.
utility.nullsemaphore.acquire=NullSemaphore.acquire() for {0}.
utility.nullsemaphore.release=NullSemaphore.release() for {0}.

utility.semaphoreimpl.acquire=SemaphoreImpl.acquire() for {0}, thread = {1} with _lockCounter = {2}.
utility.semaphoreimpl.gotlock=SemaphoreImpl.acquire() for {0}, got for thread = {1} with _lockCounter = {2}.
utility.semaphoreimpl.release=SemaphoreImpl.release() for {0}, thread = {1} with _lockCounter = {2}.
utility.semaphoreimpl.wrongthread=SemaphoreImpl.release() wrong thread for {0}, thread = {1}.

